ch - finding the path

never write component inside a component (as it create component every time the function)

never write useState() in if-else condition or inside a for loop

never use useState or create useState outside the functional component (as it won't make sense )

createBrowserRoute is a component from react-router-dom which helps to create routes

TWO TYPES OF ROUTING -
Client side routing - we don't wnat to load anything from Server
Server side routing


If you want to create nested routes 
then you have to create Outlet it is component inside react-router-dom
All children go into outlet 
like body , about , contact 

------------------------------------------------------------------------

Ch- 8 -> Let's get Classy 

Class Based Components - 

There are two phase in page
first phase - is "render phase" (here first constructor is called then it renders the component)
second phase - is "Commit phase" (here first dom is updated or api is called )

***********************
In UseEffect if we use setInterval then we have to clean it up as well 
and in useEffect we clean up setInterval using return 
UseEffect(()=>{
    const time = setInterval(()=>{
        console.log("namaste react");
    },1000);
    
    return ()=>{
        clearInterval(time);
    }
},[])

this is how we clean up our code (in class based components we use componentWillUnmount)


--------------------------------------------------------------------------

ch9 -> Optimizing our app

Functions we write or components it makes our code reusable , readable, maintable , testable 

modularity means code is broken down into meaningfull pieces


chunking , code splitting , dynamic bundling , lazy Loading , on demand loading , dynamic import
these are same thing just different words 

parcel uses only one js file so it is ok for normal projects 
but if we use it for production then our website will not work properly 
that's why we have to split our code into meaningful bundles and it is called as chunking etc 

-------------------------------------------

ch-10 (Jo Dikhta hai bo bikta hai)

in this chapter akshay teach us how to use tailwind

what types of css -
inline css
external css (normal css)
style component
material ui , chakara , base ui 
taillwind
bootstrap
 
pros and cons of using different css type

----------------------------------------------------

ch-11  (Data is the new oil)

In this chapter we studied about  props drilling ,lifting the state up

props drilling is passing props from parents -> childOne -> Child'sChild
here Child'sChild wants props of parents but chilOne has no use of its but still we have to pass props so that Child'sChild can use it
So it is not good way that's why we use useContext hook

In Context hook we can directly pass parent to Child'sChild 
and we can use Context anywhere in the code 
Context -
creating context -> 
import {createContext} from "./react"
const UserContext = createContext({
    loggedInUser: "Default User",
});
export default UserContext;

At the end of the day createContext is a function 


*****************

In functional component we use it like this ->

useContext -> import {useContext} from "./react";

const {loggedInUser} = useContext(filename where we create context);
<li className="px-4 ">{loggedInUser}</li>

At the end of the day it is hook and hook is function 
so useContext is also a funtion.

******************

In ClassBased Components -
import UserContext from "../utils/UserContext";  //importing it 

//using it by writing its name.Consumer
<UserContext.Consumer>
            {({ loggedInUser }) => (
              <h1 className="text-xl font-bold">{loggedInUser}</h1>
            )}
</UserContext.Consumer>

We use Context to avoid prop drilling 

----------------------------------------------

ch-12 Let's Build our Store 

Why we use context api 

cons of redux ->  it is complex to set , it has huge learning cuff, it is tough to learn
it comes with lot of complexities 
Only use redux when you have large scale application which involves a lof of data handling 
It is not require to use redux in small applications 

redux and react are different things 

As redux is complex so it comes with redux toolkit
we study redux toolkit 
difference btw redux and redux toolkit 
GO and see on google (redux toolkit)

Redux at the end of the day is a big object 

We can have multiple Context but we can have only one redux store 
in context our component can directly modify the context but in redux store component can not directly modify our redux store  

Why we can not directy modify the store ??


in redux store we have different slices for components 

To add redux we install it using command
npm i @reduxjs/toolkit
npm i react-redux

why we add to packages is because first library (i.e. @reduxjs/toolkit) is core of redux
and the other library is a bridge between react AND redux 


----------------------------------------

ch-13 Time for the test

Different types of testing 
    - Manual Testing (done by humans only)
    - Automation Testing 
        - Selenium Testing
    
    - E2E (end to end) Testing  - covers entires users journey and uses headless browser 
    (headless browser is kind of like a actual browser having no ui)
    with headless bbrowser we can execute test cases faster because it is headless as it does not have viewport or ui 

    (most used by developers)
    - Unit testing (this is the core job of developer) - it means you are testing small components
    - Integration Testing 

    ********************
    React testing library is replacement of enzyme(it is used in past ) 
    it is dependent on jest

    we will be using jest for testing 
    Jest is a delightful javascript testing framework with a focus on simplicity
    if you need to test javascript code we use jest
    It works with projects using Babel , Typescript , node , react , angular vue and more 

    Installing react testing library 
    1 - npm install --save-dev @testing-library/react 

    then install jest 
    2- npm i -D jest 

    3 - configure jest  -> npx jest --init 
        (npx why bcz we have to execute it only once)
        then it will ask some qus
        Q- would you like to use typescript .... ?  
            no (ans)
        Q -chose the test environmet -
            jsdom (you have to choose )
        Q- Do you want jest to add coverage reports ?
            yes
        Q- which provider should be used to instrument code for coverage
            Babel (choose)
        Q- Automatically clear mock calls ,.....every tests ?
            yes 
        
        After all this it will create a file named jest.config.js

    4- then run jest using command
        npm run test
        it will throw an error  
        (As of Jest 28 "jest-environment-jsdom" is no longer shipped by default, make sure to install it separately.)
    
    5-so we will install one more package
        npm i -D jest-environment-jsdom 
    6 - create fist test file
    7- configure babel (so that test file understand import)
        npm install --save-dev babel-jest @babel/core @babel/preset-env

        config babel 
        Configure Babel to target your current version of Node by creating a babel.config.js file in the root of your project:

        babel.config.js (file name ) or use can use .babelrc as well (.babelrc requires a json this you have to write in .babelrc
        {
            "presets": [['@babel/preset-env', {"targets": {"node": 'current'}}]],
        })

        {
        presets: [['@babel/preset-env', {targets: {node: 'current'}}]],
        };
    8 - write test cases and git ignore /coverage file
    9 - Jest does not understad jsx as well so babel will help to understand jsx
        so we have to install
            npm i -D @babel/preset-react

        ['@babel/preset-react', {"runtime" : automatic}]
        have to write this in .babelrc file  
            ['@babel/preset-react', {"runtime" : automatic}]
        like this below
        {
            "presets": [
                ["@babel/preset-env", {"targets": {"node": "current"}}],
                ["@babel/preset-react", { "runtime" : "automatic" }]
            ],
        }   