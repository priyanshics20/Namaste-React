In this lecture we ignite our that is is we create our own 
create-react-app

* For production creat-react-app uses bundler(A bundler in React is a tool that allows   developers to package their code into a single file or bundle. This bundle can then be used to run the application in the browser. Bundlers are used to reduce the size of the code and improve the performance of the application.) and in bundlers it uses webpack and babel

* Types of bundlers -  vite , parcel , webpack 
* we use parcel to creat our own create-rect-app 
using parcel because it is easy to use , easy to setup 
parcel is a package 

* npm 
(it does not have fullform but it is called as node package manager)
it is used to manage our packages , it manages all ur packages 

*Why do we use npm ?
we use npm bcz we want all packages in our project and to manage a lot of packages that's why we use npm or our react app is powered by lots of packages (suppose to minifi , to remove console.log , to optimize our app ) so for this we need lot of packages so that's why we use npm 

*How to initialize npm?
npm init
npm init -y can be used to skip the setup step, npm takes care of it and creates the package.json json file automatically, but without configurations.

*installation commands for parcel :
npm install -D parcel

-D is used for development and as a development dependency.
--save-dev (sometimes this is also used It is one in the same thing )
(Dependency means all the packages our project need)

*Parcel Commands :
For development build:
npx parcel <entry_point> 
For production build :
npx parcel build <entry_point> 

to run file use-
npx parcel (start point here is index.html)
npx parcel index.html

*carate and tilde sign in package.json means  - 
~version “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the MINOR version. ~1.2.3 will use releases from 1.2.3 to <1.3.0.

^version “Compatible with version”, will update you to all future minor/patch versions, without incrementing the MAJOR version. ^1.2.3 will use releases from 1.2.3 to <2.0.0.

About package-lock.json -
it is very important file 
it locks the version 
you never have to be it in .gitignore
It maintaians exact version of it 
It also keep hash of version of (ex- parcel) this hash ensures that what exactly the version of parcel was running in my system is exactly the same on the production or not

Node modules is a type of database in npm

it will show error as normal js does not understand import 
so we have to pass type="module"
<script type="module" src="script.js"></script>

